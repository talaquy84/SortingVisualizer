{"version":3,"sources":["sortingAlgorithms/mergeSort.js","sortingAlgorithms/bubbleSort.js","sortingAlgorithms/insertionSort.js","sortingAlgorithms/quickSort.js","sortingAlgorithms/selectionSort.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","swap","temp","getQuickSortAnimations","quickSortHelper","pivotIdx","leftIdx","rightIdx","SortingVisualizer","props","handleChange","event","target","value","setState","numberArrayBars","barWidth","animationSpeedMS","resetArray","state","this","min","max","random","isSorted","counter","getBubbleSortAnimations","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","oldHeight","newHeight","height","console","log","pivotStyle","pivotColor","getInsertionSortAnimations","smallestIdx","getSelectionSortAnimations","className","map","idx","key","width","id","onChange","onClick","bubbleSort","quickSort","selectionSort","insertionSort","mergeSort","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bf84eae1.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n\r\n\r\n","export function getBubbleSortAnimations(array) {\r\n  let isSorted = false;\r\n  let counter = 0;\r\n  const animations = [];\r\n\r\n  while (!isSorted) {\r\n    isSorted = true;\r\n    for ( let i = 0; i < array.length - 1 - counter; i++) {\r\n      //Change color of comparing bar and revert\r\n      animations.push([i, i + 1]);\r\n      animations.push([i, i + 1]);\r\n      \r\n      if (array[i] > array[i+1]) {\r\n        //swap if current is greater than behind number\r\n        animations.push([i, array[i], array[i+1]]);\r\n        swap(i, i+1, array);\r\n        isSorted = false;\r\n      } else {\r\n        animations.push([i, array[i], array[i+1]]);\r\n      }\r\n    }\r\n    counter++;\r\n  }\r\n  return animations;\r\n}\r\n\r\nfunction swap(i, j, array) {\r\n  const temp = array[j];\r\n  array[j] = array[i];\r\n  array[i] = temp;\r\n}","export function getInsertionSortAnimations(array) {\r\n    const animations = [];\r\n  \r\n    for (let i = 1; i < array.length; i++){\r\n        let j = i;\r\n        \r\n        while (j > 0 && array[j] < array[j - 1]) {\r\n            animations.push([j, j-1]);\r\n            animations.push([j, j-1]);\r\n            animations.push([j, array[j], array[j - 1]]);\r\n            swap(j, j - 1, array);\r\n            j -= 1;\r\n        }\r\n\r\n        animations.push([i, i-1]);\r\n        animations.push([i, i-1]);\r\n        animations.push([i, array[i], array[i]]);\r\n\r\n    }\r\n    return animations;\r\n}\r\nfunction swap(i, j, array) {\r\n    const temp = array[j];\r\n    array[j] = array[i];\r\n    array[i] = temp;\r\n}","export function getQuickSortAnimations(array) {\r\n    const animations = [];\r\n    quickSortHelper(array, 0, array.length - 1, animations)\r\n    return animations;\r\n}\r\n\r\nfunction quickSortHelper(array, startIdx, endIdx, animations) {\r\n    if (startIdx >= endIdx) return;\r\n    const pivotIdx = startIdx;\r\n    let leftIdx = startIdx + 1;\r\n    let rightIdx = endIdx;\r\n\r\n    while (rightIdx >= leftIdx) {\r\n        //Change color of comparing indexes and revert\r\n        animations.push([pivotIdx, leftIdx, rightIdx]);\r\n        animations.push([pivotIdx, leftIdx, rightIdx]); \r\n        if (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\r\n            //Swap animations\r\n            animations.push([leftIdx, rightIdx, array[leftIdx], array[rightIdx]]);\r\n            swap(leftIdx, rightIdx, array);\r\n        } else {\r\n            // -1 mean we don't swap\r\n            animations.push([leftIdx, rightIdx, -1, -1]);\r\n        }\r\n        if (array[leftIdx] <= array[pivotIdx])  leftIdx++;\r\n        if (array[rightIdx] >= array[pivotIdx]) rightIdx--;\r\n    }\r\n    //Change color of comparing indexes and revert\r\n    // Check if left index is greater than its length - 1\r\n    if (leftIdx <= array.length - 1 ) {\r\n        animations.push([pivotIdx, leftIdx, rightIdx]);\r\n        animations.push([pivotIdx, leftIdx, rightIdx]);\r\n    } else {\r\n        animations.push([pivotIdx, pivotIdx, rightIdx]);\r\n        animations.push([pivotIdx, pivotIdx, rightIdx]);\r\n    }\r\n    //Swap animations\r\n    animations.push([pivotIdx, rightIdx, array[pivotIdx], array[rightIdx]]);\r\n    swap(pivotIdx, rightIdx, array);\r\n\r\n    const leftSubarrayIsSmaller = rightIdx - 1 - startIdx < endIdx - (rightIdx + 1);\r\n    if(leftSubarrayIsSmaller) {\r\n        quickSortHelper(array, startIdx, rightIdx - 1, animations);\r\n        quickSortHelper(array, rightIdx + 1, endIdx, animations);\r\n    } else {\r\n        quickSortHelper(array, rightIdx + 1, endIdx, animations);\r\n        quickSortHelper(array, startIdx, rightIdx - 1, animations);\r\n    }\r\n}\r\n\r\nfunction swap(i, j, array) {\r\n    const temp = array[j];\r\n    array[j] = array[i];\r\n    array[i] = temp;\r\n}","export function getSelectionSortAnimations(array) {\r\n    let startIdx = 0;\r\n    const animations = [];\r\n  \r\n    while (startIdx < array.length - 1) {\r\n        let smallestIdx = startIdx;\r\n        for (let i = startIdx + 1; i < array.length; i++) {\r\n            //Change color of comparing bar and revert\r\n            animations.push([smallestIdx, i]);\r\n            animations.push([smallestIdx, i]);\r\n            animations.push([smallestIdx, i, -1, -1]);\r\n            if (array[smallestIdx] > array[i]) smallestIdx = i;\r\n            \r\n        }\r\n        animations.push([startIdx, smallestIdx]);\r\n        animations.push([startIdx, smallestIdx]);\r\n        animations.push([startIdx, smallestIdx, array[startIdx], array[smallestIdx]]);\r\n        swap(startIdx, smallestIdx, array)\r\n        startIdx++;\r\n    }\r\n    return animations;\r\n}\r\n\r\nfunction swap(i, j, array) {\r\n    const temp = array[j];\r\n    array[j] = array[i];\r\n    array[i] = temp;\r\n}","import  React from 'react';\r\nimport  './SortingVisualizer.css';\r\nimport { Component } from 'react';\r\nimport { getMergeSortAnimations } from '../sortingAlgorithms/mergeSort.js';\r\nimport { getBubbleSortAnimations } from '../sortingAlgorithms/bubbleSort.js';\r\nimport { getInsertionSortAnimations } from '../sortingAlgorithms/insertionSort.js';\r\nimport { getQuickSortAnimations } from '../sortingAlgorithms/quickSort.js';\r\nimport { getSelectionSortAnimations } from '../sortingAlgorithms/selectionSort.js';\r\n\r\nconst BAR_HEIGHT_RANGE = 600;\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'turquoise';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'black';\r\n\r\nclass SortingVisualizer extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n            numberArrayBars: 50,\r\n            barWidth: 10,\r\n            animationSpeedMS: 7,\r\n        };\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray(){\r\n        const array = [];\r\n        for (let i = 0; i < this.state.numberArrayBars; i++){\r\n            array.push(randomIntFromInterval(5, BAR_HEIGHT_RANGE));\r\n        }\r\n        this.setState({array});\r\n    }\r\n\r\n    bubbleSort(){\r\n        const animations = getBubbleSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n          const arrayBars = document.getElementsByClassName('array-bar');\r\n          const isColorChange = i % 3 !== 2;\r\n\r\n          if (isColorChange) {\r\n            const [barOneIdx, barTwoIdx] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            \r\n            const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = color;\r\n              barTwoStyle.backgroundColor = color;\r\n            }, i * this.state.animationSpeedMS);\r\n          } else {\r\n            setTimeout(() => {\r\n              const [barOneIdx, oldHeight, newHeight] = animations[i];\r\n              if (oldHeight > newHeight) {\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barOneIdx+1].style;\r\n\r\n                barOneStyle.height = `${newHeight}px`;\r\n                barTwoStyle.height = `${oldHeight}px`;\r\n              }\r\n            }, i * this.state.animationSpeedMS);\r\n          }\r\n        }\r\n    }\r\n\r\n    quickSort() {\r\n      const animations = getQuickSortAnimations(this.state.array);\r\n      \r\n      console.log(animations);\r\n      for (let i = 0; i < animations.length; i++) {\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        const isColorChange = i % 3 !== 2;\r\n        ;\r\n        if (isColorChange) {\r\n          const [pivotIdx, barOneIdx, barTwoIdx] = animations[i];\r\n          console.log(pivotIdx, barOneIdx, barTwoIdx);\r\n            const pivotStyle = arrayBars[pivotIdx].style;\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n\r\n          const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n          //Yellow for pivot bar\r\n          const pivotColor = i % 3 === 0 ? \"Yellow\" : PRIMARY_COLOR;\r\n\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = color;\r\n            barTwoStyle.backgroundColor = color;\r\n            pivotStyle.backgroundColor = pivotColor;\r\n          }, i * this.state.animationSpeedMS);\r\n        } else {\r\n          setTimeout(() => {\r\n            const [barOneIdx, barTwoIdx, oldHeight, newHeight] = animations[i];\r\n            if (oldHeight >= 0 && newHeight >=0) {\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              const barTwoStyle = arrayBars[barTwoIdx].style;\r\n\r\n              barOneStyle.height = `${newHeight}px`;\r\n              barTwoStyle.height = `${oldHeight}px`;\r\n            }\r\n          }, i * this.state.animationSpeedMS);\r\n        }\r\n        \r\n      }\r\n    }\r\n\r\n    insertionSort(){\r\n      const animations = getInsertionSortAnimations(this.state.array);\r\n      \r\n      console.log(animations);\r\n      for (let i = 0; i < animations.length; i++) {\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        const isColorChange = i % 3 !== 2;\r\n        ;\r\n        if (isColorChange) {\r\n          const [barOneIdx, barTwoIdx] = animations[i];\r\n\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          const barTwoStyle = arrayBars[barTwoIdx].style;\r\n          \r\n          const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = color;\r\n            barTwoStyle.backgroundColor = color;\r\n          }, i * this.state.animationSpeedMS);\r\n        } else {\r\n          setTimeout(() => {\r\n            const [barOneIdx, oldHeight, newHeight] = animations[i];\r\n            if (oldHeight < newHeight) {\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              const barTwoStyle = arrayBars[barOneIdx-1].style;\r\n\r\n              barOneStyle.height = `${newHeight}px`;\r\n              barTwoStyle.height = `${oldHeight}px`;\r\n            }\r\n          }, i * this.state.animationSpeedMS);\r\n        }\r\n      }\r\n    }\r\n\r\n    mergeSort(){\r\n        const animations = getMergeSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n          const arrayBars = document.getElementsByClassName('array-bar');\r\n          const isColorChange = i % 3 !== 2;\r\n\r\n          if (isColorChange) {\r\n            const [barOneIdx, barTwoIdx] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            \r\n            const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = color;\r\n              barTwoStyle.backgroundColor = color;\r\n            }, i * this.state.animationSpeedMS);\r\n          } else {\r\n            setTimeout(() => {\r\n              const [barOneIdx, newHeight] = animations[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              barOneStyle.height = `${newHeight}px`;\r\n            }, i * this.state.animationSpeedMS);\r\n          } \r\n        }\r\n    }\r\n\r\n    selectionSort() {\r\n      const animations = getSelectionSortAnimations(this.state.array);\r\n      console.log(animations);\r\n      for (let i = 0; i < animations.length; i++) {\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        const isColorChange = i % 3 !== 2;\r\n\r\n        if (isColorChange) {\r\n          const [barOneIdx, barTwoIdx] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          const barTwoStyle = arrayBars[barTwoIdx].style;\r\n          \r\n          const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = color;\r\n            barTwoStyle.backgroundColor = color;\r\n          }, i * this.state.animationSpeedMS);\r\n        } else {\r\n          setTimeout(() => {\r\n            const [barOneIdx, barTwoIdx, oldHeight, newHeight] = animations[i];\r\n            if (oldHeight >= 0 && newHeight >=0) {\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              const barTwoStyle = arrayBars[barTwoIdx].style;\r\n\r\n              barOneStyle.height = `${newHeight}px`;\r\n              barTwoStyle.height = `${oldHeight}px`;\r\n            }\r\n          }, i * this.state.animationSpeedMS);\r\n        }\r\n      }\r\n    }\r\n\r\n    handleChange = (event) => {\r\n      if (event.target.value === \"Small\") {\r\n        this.setState({ numberArrayBars: 50, barWidth: 10,  animationSpeedMS: 7 }, ()=>{this.resetArray()});\r\n      } else if (event.target.value === \"Medium\") {\r\n        this.setState({ numberArrayBars: 100, barWidth: 5,  animationSpeedMS: 4 }, ()=>{this.resetArray()});\r\n      } else if (event.target.value === \"Large\"){\r\n        this.setState({ numberArrayBars: 150, barWidth: 3,  animationSpeedMS: 2 }, ()=>{this.resetArray()});\r\n      }\r\n    }\r\n    render() {\r\n        //destructor\r\n        const { array, barWidth } = this.state;\r\n\r\n        return(\r\n          <div>\r\n            <header className=\"header\">\r\n              <h1>Sorting Visualizer</h1>\r\n            </header>\r\n            <div className=\"array-container\">\r\n              {array.map((value, idx) => (\r\n                  <div \r\n                      className=\"array-bar\" \r\n                      key={idx} \r\n                      style={{\r\n                          backgroundColor: PRIMARY_COLOR,\r\n                          height: `${value}px`,\r\n                          width: `${barWidth}px`,\r\n                          }}></div>\r\n              ))}\r\n              <div className=\"button\">\r\n                  <label>Size of Array: </label>\r\n                  <select id=\"lang\" onChange={this.handleChange} >\r\n                      <option value=\"Small\">Small</option>\r\n                      <option value=\"Medium\">Medium</option>\r\n                      <option value=\"Large\">Large</option>\r\n                  </select>\r\n                  <button onClick={()=> this.resetArray()} className=\"btn\">Generate New Array</button>\r\n                  <button onClick={()=> this.bubbleSort()} className=\"btn\">Bubble Sort</button>\r\n                  <button onClick={()=> this.quickSort()} className=\"btn\">Quick Sort</button>\r\n                  <button onClick={()=> this.selectionSort()} className=\"btn\">Selection Sort</button>\r\n                  <button onClick={()=> this.insertionSort()} className=\"btn\">Insertion Sort</button>\r\n                  <button onClick={()=> this.mergeSort()} className=\"btn\">Merge Sort</button>\r\n              </div>\r\n          </div>\r\n          </div>\r\n          \r\n        );\r\n    }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n    return Math.floor(Math.random() * (max  - min + 1) + min);\r\n}\r\n\r\nexport default SortingVisualizer;","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}